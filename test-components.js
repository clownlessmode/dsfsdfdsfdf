#!/usr/bin/env node

/**
 * üß™ FOODCORT TERMINAL - –¢–ï–°–¢–´ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
 * 1. Zustand stores (cart, session, auth)
 * 2. –£—Ç–∏–ª–∏—Ç—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã
 * 3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º
 * 4. –õ–æ–≥–∏–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
 *
 * –ó–∞–ø—É—Å–∫: node test-components.js
 */

const CONFIG = {
  COLORS: {
    GREEN: "\x1b[32m",
    RED: "\x1b[31m",
    YELLOW: "\x1b[33m",
    BLUE: "\x1b[34m",
    MAGENTA: "\x1b[35m",
    CYAN: "\x1b[36m",
    WHITE: "\x1b[37m",
    RESET: "\x1b[0m",
    BOLD: "\x1b[1m",
  },
};

class ComponentTester {
  constructor() {
    this.testResults = [];
  }

  log(message, color = CONFIG.COLORS.WHITE) {
    console.log(`${color}${message}${CONFIG.COLORS.RESET}`);
  }

  logTest(testName, status, details = "") {
    const statusColor =
      status === "PASS" ? CONFIG.COLORS.GREEN : CONFIG.COLORS.RED;
    const statusIcon = status === "PASS" ? "‚úÖ" : "‚ùå";

    this.log(`${statusIcon} ${testName}: ${status}`, statusColor);
    if (details) {
      this.log(`   ${details}`, CONFIG.COLORS.CYAN);
    }

    this.testResults.push({ testName, status, details });
  }

  async runTest(testName, testFunction) {
    try {
      this.log(
        `\n${CONFIG.COLORS.BOLD}üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testName}${CONFIG.COLORS.RESET}`
      );
      await testFunction();
    } catch (error) {
      this.logTest(testName, "FAIL", error.message);
    }
  }

  // –¢–ï–°–¢ 1: –§—É–Ω–∫—Ü–∏—è pluralize
  async testPluralizeFunction() {
    const pluralize = (count, one, few, many) => {
      if (count % 10 === 1 && count % 100 !== 11) {
        return one;
      } else if (
        [2, 3, 4].includes(count % 10) &&
        ![12, 13, 14].includes(count % 100)
      ) {
        return few;
      } else {
        return many;
      }
    };

    const tests = [
      { count: 1, expected: "—Ç–æ–≤–∞—Ä" },
      { count: 2, expected: "—Ç–æ–≤–∞—Ä–∞" },
      { count: 5, expected: "—Ç–æ–≤–∞—Ä–æ–≤" },
      { count: 11, expected: "—Ç–æ–≤–∞—Ä–æ–≤" },
      { count: 21, expected: "—Ç–æ–≤–∞—Ä" },
      { count: 22, expected: "—Ç–æ–≤–∞—Ä–∞" },
    ];

    tests.forEach((test) => {
      const result = pluralize(test.count, "—Ç–æ–≤–∞—Ä", "—Ç–æ–≤–∞—Ä–∞", "—Ç–æ–≤–∞—Ä–æ–≤");
      if (result === test.expected) {
        this.logTest(
          `Pluralize (${test.count})`,
          "PASS",
          `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`
        );
      } else {
        this.logTest(
          `Pluralize (${test.count})`,
          "FAIL",
          `–û–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected}, –ø–æ–ª—É—á–µ–Ω–æ: ${result}`
        );
      }
    });
  }

  // –¢–ï–°–¢ 2: –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
  async testFileTypeDetection() {
    const getFileType = (filename) => {
      const extension = filename.split(".").pop().toLowerCase();

      if (["jpg", "jpeg", "png", "gif", "webp", "svg"].includes(extension)) {
        return "image";
      } else if (["mp4", "avi", "mov", "webm", "mkv"].includes(extension)) {
        return "video";
      } else if (["pdf", "doc", "docx", "txt"].includes(extension)) {
        return "document";
      } else {
        return "unknown";
      }
    };

    const tests = [
      { filename: "image.jpg", expected: "image" },
      { filename: "video.mp4", expected: "video" },
      { filename: "document.pdf", expected: "document" },
      { filename: "unknown.xyz", expected: "unknown" },
      { filename: "photo.webp", expected: "image" },
      { filename: "movie.webm", expected: "video" },
    ];

    tests.forEach((test) => {
      const result = getFileType(test.filename);
      if (result === test.expected) {
        this.logTest(`File type (${test.filename})`, "PASS", `–¢–∏–ø: ${result}`);
      } else {
        this.logTest(
          `File type (${test.filename})`,
          "FAIL",
          `–û–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected}, –ø–æ–ª—É—á–µ–Ω–æ: ${result}`
        );
      }
    });
  }

  // –¢–ï–°–¢ 3: –°–∏–º—É–ª—è—Ü–∏—è Zustand Cart Store
  async testCartStoreLogic() {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É cart store
    class MockCartStore {
      constructor() {
        this.state = { items: [] };
      }

      addItem(item) {
        const existingIndex = this.state.items.findIndex(
          (existingItem) =>
            this.getItemId(existingItem) === this.getItemId(item)
        );

        if (existingIndex !== -1) {
          const updatedItem = { ...this.state.items[existingIndex] };
          updatedItem.quantity += item.quantity;
          updatedItem.totalPrice =
            updatedItem.quantity * (updatedItem.selectedType?.price || 0);
          this.state.items[existingIndex] = updatedItem;
        } else {
          this.state.items.push(item);
        }
      }

      removeItem(itemId) {
        this.state.items = this.state.items.filter(
          (item) => this.getItemId(item) !== itemId
        );
      }

      increaseQuantity(itemId) {
        const item = this.state.items.find(
          (item) => this.getItemId(item) === itemId
        );
        if (item) {
          item.quantity += 1;
          item.totalPrice = item.quantity * (item.selectedType?.price || 0);
        }
      }

      decreaseQuantity(itemId) {
        const itemIndex = this.state.items.findIndex(
          (item) => this.getItemId(item) === itemId
        );
        if (itemIndex !== -1) {
          const item = this.state.items[itemIndex];
          if (item.quantity > 1) {
            item.quantity -= 1;
            item.totalPrice = item.quantity * (item.selectedType?.price || 0);
          } else {
            this.state.items.splice(itemIndex, 1);
          }
        }
      }

      clearCart() {
        this.state.items = [];
      }

      getItemId(item) {
        return `${item.product.id}-${
          item.selectedType?.id || "default"
        }-${JSON.stringify(item.extras)}-${Array.from(item.removedIngredients)
          .sort()
          .join(",")}`;
      }

      getTotalPrice() {
        return this.state.items.reduce(
          (total, item) => total + item.totalPrice,
          0
        );
      }

      getTotalItems() {
        return this.state.items.length;
      }
    }

    const cart = new MockCartStore();

    // –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    const mockProduct = {
      id: 1,
      name: "–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
      image: "/products/pizza.png",
      type: [{ id: 1, name: "–°—Ä–µ–¥–Ω—è—è", price: 500, weight: 500 }],
      ingredients: ["—Ç–µ—Å—Ç–æ", "—Ç–æ–º–∞—Ç—ã", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–±–∞–∑–∏–ª–∏–∫"],
      extras: [{ id: 1, name: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—ã—Ä", price: 50 }],
    };

    const cartItem = {
      product: mockProduct,
      selectedType: mockProduct.type[0],
      quantity: 1,
      extras: {},
      removedIngredients: new Set(),
      totalPrice: 500,
    };

    cart.addItem(cartItem);
    this.logTest(
      "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É",
      "PASS",
      `–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: ${cart.getTotalItems()}, –°—É–º–º–∞: ${cart.getTotalPrice()} ‚ÇΩ`
    );

    // –¢–µ—Å—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    cart.increaseQuantity(cart.getItemId(cartItem));
    this.logTest(
      "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞",
      "PASS",
      `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${
        cart.state.items[0].quantity
      }, –°—É–º–º–∞: ${cart.getTotalPrice()} ‚ÇΩ`
    );

    // –¢–µ—Å—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    cart.decreaseQuantity(cart.getItemId(cartItem));
    this.logTest(
      "–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞",
      "PASS",
      `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${
        cart.state.items[0].quantity
      }, –°—É–º–º–∞: ${cart.getTotalPrice()} ‚ÇΩ`
    );

    // –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
    cart.clearCart();
    this.logTest(
      "–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã",
      "PASS",
      `–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: ${cart.getTotalItems()}`
    );
  }

  // –¢–ï–°–¢ 4: –°–∏–º—É–ª—è—Ü–∏—è Session Store
  async testSessionStoreLogic() {
    class MockSessionStore {
      constructor() {
        this.state = { session: null };
      }

      setSession(session) {
        this.state.session = session;
      }

      clearSession() {
        this.state.session = null;
      }

      getSession() {
        return this.state.session;
      }
    }

    const session = new MockSessionStore();

    // –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏
    const sessionData = {
      telephone: "+7 (999) 123-45-67",
      receivingMethod: "delivery",
    };

    session.setSession(sessionData);
    this.logTest(
      "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏",
      "PASS",
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${session.getSession().telephone}`
    );

    // –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏
    session.clearSession();
    this.logTest(
      "–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏",
      "PASS",
      `–°–µ—Å—Å–∏—è: ${session.getSession() ? "–∞–∫—Ç–∏–≤–Ω–∞" : "–æ—á–∏—â–µ–Ω–∞"}`
    );
  }

  // –¢–ï–°–¢ 5: –°–∏–º—É–ª—è—Ü–∏—è Auth Store
  async testAuthStoreLogic() {
    class MockAuthStore {
      constructor() {
        this.state = { authorized: false };
      }

      authorize() {
        this.state.authorized = true;
      }

      deauthorize() {
        this.state.authorized = false;
      }

      isAuthorized() {
        return this.state.authorized;
      }
    }

    const auth = new MockAuthStore();

    // –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth.authorize();
    this.logTest(
      "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      "PASS",
      `–°—Ç–∞—Ç—É—Å: ${auth.isAuthorized() ? "–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" : "–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}`
    );

    // –¢–µ—Å—Ç –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth.deauthorize();
    this.logTest(
      "–î–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      "PASS",
      `–°—Ç–∞—Ç—É—Å: ${auth.isAuthorized() ? "–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" : "–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}`
    );
  }

  // –¢–ï–°–¢ 6: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º
  async testFormValidation() {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const validatePhone = (phone) => {
      const phoneRegex = /^\+7 \(\d{3}\) \d{3}-\d{2}-\d{2}$/;
      return phoneRegex.test(phone);
    };

    const phoneTests = [
      { phone: "+7 (999) 123-45-67", expected: true },
      { phone: "+7 (999) 123-45-6", expected: false },
      { phone: "8 (999) 123-45-67", expected: false },
      { phone: "+7 (999) 123-45-678", expected: false },
    ];

    phoneTests.forEach((test) => {
      const result = validatePhone(test.phone);
      if (result === test.expected) {
        this.logTest(
          `–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (${test.phone})`,
          "PASS",
          `–í–∞–ª–∏–¥–Ω—ã–π: ${result}`
        );
      } else {
        this.logTest(
          `–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (${test.phone})`,
          "FAIL",
          `–û–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected}, –ø–æ–ª—É—á–µ–Ω–æ: ${result}`
        );
      }
    });

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é email
    const validateEmail = (email) => {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    };

    const emailTests = [
      { email: "test@example.com", expected: true },
      { email: "invalid-email", expected: false },
      { email: "test@", expected: false },
      { email: "@example.com", expected: false },
    ];

    emailTests.forEach((test) => {
      const result = validateEmail(test.email);
      if (result === test.expected) {
        this.logTest(
          `–í–∞–ª–∏–¥–∞—Ü–∏—è email (${test.email})`,
          "PASS",
          `–í–∞–ª–∏–¥–Ω—ã–π: ${result}`
        );
      } else {
        this.logTest(
          `–í–∞–ª–∏–¥–∞—Ü–∏—è email (${test.email})`,
          "FAIL",
          `–û–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected}, –ø–æ–ª—É—á–µ–Ω–æ: ${result}`
        );
      }
    });
  }

  // –¢–ï–°–¢ 7: –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω
  async testPriceCalculation() {
    const calculateItemPrice = (selectedType, extras, quantity = 1) => {
      const unitPrice = selectedType?.price || 0;
      const extrasTotal = Object.entries(extras).reduce((sum, [id, count]) => {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ ID
        const extraPrice = 50; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        return sum + count * extraPrice;
      }, 0);

      return (unitPrice + extrasTotal) * quantity;
    };

    const tests = [
      {
        name: "–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞",
        selectedType: { price: 500 },
        extras: {},
        quantity: 1,
        expected: 500,
      },
      {
        name: "–¶–µ–Ω–∞ —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏",
        selectedType: { price: 500 },
        extras: { 1: 2 }, // 2 –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ 50‚ÇΩ
        quantity: 1,
        expected: 600,
      },
      {
        name: "–¶–µ–Ω–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º",
        selectedType: { price: 500 },
        extras: {},
        quantity: 2,
        expected: 1000,
      },
      {
        name: "–ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞",
        selectedType: { price: 500 },
        extras: { 1: 1 }, // 1 –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ 50‚ÇΩ
        quantity: 2,
        expected: 1100,
      },
    ];

    tests.forEach((test) => {
      const result = calculateItemPrice(
        test.selectedType,
        test.extras,
        test.quantity
      );
      if (result === test.expected) {
        this.logTest(test.name, "PASS", `–¶–µ–Ω–∞: ${result} ‚ÇΩ`);
      } else {
        this.logTest(
          test.name,
          "FAIL",
          `–û–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected} ‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ: ${result} ‚ÇΩ`
        );
      }
    });
  }

  // –¢–ï–°–¢ 8: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  async testCartItemIdGeneration() {
    const generateCartItemId = (item) => {
      return `${item.product.id}-${
        item.selectedType?.id || "default"
      }-${JSON.stringify(item.extras)}-${Array.from(item.removedIngredients)
        .sort()
        .join(",")}`;
    };

    const mockItem = {
      product: { id: 1 },
      selectedType: { id: 2 },
      extras: { 1: 1, 2: 2 },
      removedIngredients: new Set([0, 2]),
    };

    const expectedId = '1-2-{"1":1,"2":2}-0,2';
    const actualId = generateCartItemId(mockItem);

    if (actualId === expectedId) {
      this.logTest("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ", "PASS", `ID: ${actualId}`);
    } else {
      this.logTest(
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ",
        "FAIL",
        `–û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedId}, –ø–æ–ª—É—á–µ–Ω–æ: ${actualId}`
      );
    }
  }

  // –¢–ï–°–¢ 9: –†–∞–±–æ—Ç–∞ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
  async testIngredientsLogic() {
    const mockProduct = {
      ingredients: [
        "—Ç–µ—Å—Ç–æ",
        "—Ç–æ–º–∞—Ç—ã",
        "–º–æ—Ü–∞—Ä–µ–ª–ª–∞",
        "–±–∞–∑–∏–ª–∏–∫",
        "–æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ",
      ],
    };

    // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    const removedIngredients = new Set([1, 3]); // —É–¥–∞–ª—è–µ–º —Ç–æ–º–∞—Ç—ã –∏ –±–∞–∑–∏–ª–∏–∫
    const remainingIngredients = mockProduct.ingredients.filter(
      (_, index) => !removedIngredients.has(index)
    );

    this.logTest(
      "–£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤",
      "PASS",
      `–û—Å—Ç–∞–ª–æ—Å—å: ${remainingIngredients.join(", ")}`
    );

    // –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
    const extras = { 1: 2, 3: 1 }; // 2 –ø–æ—Ä—Ü–∏–∏ —Å—ã—Ä–∞, 1 –ø–æ—Ä—Ü–∏—è –º—è—Å–∞
    const extrasCount = Object.values(extras).reduce(
      (sum, count) => sum + count,
      0
    );

    this.logTest(
      "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π",
      "PASS",
      `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π: ${extrasCount}`
    );
  }

  // –¢–ï–°–¢ 10: –¢–∞–π–º–µ—Ä –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
  async testTimerLogic() {
    class MockTimer {
      constructor(duration, callback) {
        this.duration = duration;
        this.callback = callback;
        this.timeLeft = duration;
        this.isRunning = false;
      }

      start() {
        this.isRunning = true;
        this.interval = setInterval(() => {
          this.timeLeft--;
          if (this.timeLeft <= 0) {
            this.stop();
            this.callback();
          }
        }, 1000);
      }

      stop() {
        this.isRunning = false;
        if (this.interval) {
          clearInterval(this.interval);
        }
      }

      getTimeLeft() {
        return this.timeLeft;
      }
    }

    let callbackExecuted = false;
    const timer = new MockTimer(3, () => {
      callbackExecuted = true;
    });

    timer.start();
    this.logTest("–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞", "PASS", `–í—Ä–µ–º—è: ${timer.getTimeLeft()} —Å–µ–∫`);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    await new Promise((resolve) => setTimeout(resolve, 100));
    this.logTest("–†–∞–±–æ—Ç–∞ —Ç–∞–π–º–µ—Ä–∞", "PASS", `–í—Ä–µ–º—è: ${timer.getTimeLeft()} —Å–µ–∫`);

    timer.stop();
    this.logTest("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞", "PASS", "–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    this.log(
      `${CONFIG.COLORS.BOLD}${CONFIG.COLORS.CYAN}üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í FOODCORT TERMINAL${CONFIG.COLORS.RESET}`
    );
    this.log(
      `${CONFIG.COLORS.YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${CONFIG.COLORS.RESET}`
    );

    const startTime = Date.now();

    await this.runTest("–§—É–Ω–∫—Ü–∏—è pluralize", () => this.testPluralizeFunction());
    await this.runTest("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞", () =>
      this.testFileTypeDetection()
    );
    await this.runTest("–õ–æ–≥–∏–∫–∞ Cart Store", () => this.testCartStoreLogic());
    await this.runTest("–õ–æ–≥–∏–∫–∞ Session Store", () =>
      this.testSessionStoreLogic()
    );
    await this.runTest("–õ–æ–≥–∏–∫–∞ Auth Store", () => this.testAuthStoreLogic());
    await this.runTest("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º", () => this.testFormValidation());
    await this.runTest("–†–∞—Å—á–µ—Ç —Ü–µ–Ω", () => this.testPriceCalculation());
    await this.runTest("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç–æ–≤–∞—Ä–∞", () =>
      this.testCartItemIdGeneration()
    );
    await this.runTest("–†–∞–±–æ—Ç–∞ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏", () =>
      this.testIngredientsLogic()
    );
    await this.runTest("–õ–æ–≥–∏–∫–∞ —Ç–∞–π–º–µ—Ä–∞", () => this.testTimerLogic());

    const endTime = Date.now();
    const duration = endTime - startTime;

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.log(
      `\n${CONFIG.COLORS.BOLD}${CONFIG.COLORS.YELLOW}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í${CONFIG.COLORS.RESET}`
    );
    this.log(
      `${CONFIG.COLORS.YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${CONFIG.COLORS.RESET}`
    );

    const passedTests = this.testResults.filter(
      (r) => r.status === "PASS"
    ).length;
    const failedTests = this.testResults.filter(
      (r) => r.status === "FAIL"
    ).length;
    const totalTests = this.testResults.length;

    this.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    this.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`, CONFIG.COLORS.GREEN);
    this.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`, CONFIG.COLORS.RED);
    this.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);

    const successRate = ((passedTests / totalTests) * 100).toFixed(1);
    this.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);

    if (failedTests === 0) {
      this.log(
        `\n${CONFIG.COLORS.BOLD}${CONFIG.COLORS.GREEN}üéâ –í–°–ï –¢–ï–°–¢–´ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ü–†–û–ô–î–ï–ù–´!${CONFIG.COLORS.RESET}`
      );
    } else {
      this.log(
        `\n${CONFIG.COLORS.BOLD}${CONFIG.COLORS.RED}‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–ú–ü–û–ù–ï–ù–¢–ê–•${CONFIG.COLORS.RESET}`
      );
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new ComponentTester();

  try {
    await tester.runAllTests();
  } catch (error) {
    console.error(
      `${CONFIG.COLORS.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}${CONFIG.COLORS.RESET}`
    );
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { ComponentTester, CONFIG };
