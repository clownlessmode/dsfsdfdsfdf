#!/usr/bin/env node

/**
 * üçï FOODCORT TERMINAL - –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞:
 * 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
 * 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 * 3. –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, —É–¥–∞–ª–µ–Ω–∏–µ)
 * 4. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–≤—ã–±–æ—Ä —Ç–∏–ø–∞, –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π, —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤)
 * 5. –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
 * 6. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
 * 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
 *
 * –ó–∞–ø—É—Å–∫: node test-integration.js
 */

const https = require("https");
const http = require("http");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  API_BASE_URL: "http://localhost:3006/api/foodcord",
  TEST_CREDENTIALS: {
    email: "lebedevvv@volcov.ru",
    password: "djF&2Lip",
  },
  TEST_TIMEOUT: 10000,
  COLORS: {
    GREEN: "\x1b[32m",
    RED: "\x1b[31m",
    YELLOW: "\x1b[33m",
    BLUE: "\x1b[34m",
    MAGENTA: "\x1b[35m",
    CYAN: "\x1b[36m",
    WHITE: "\x1b[37m",
    RESET: "\x1b[0m",
    BOLD: "\x1b[1m",
  },
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HTTP
class HTTPClient {
  constructor(baseURL) {
    this.baseURL = baseURL;
    this.cookies = "";
  }

  async request(endpoint, options = {}) {
    return new Promise((resolve, reject) => {
      const url = new URL(endpoint, this.baseURL);
      const isHttps = url.protocol === "https:";
      const client = isHttps ? https : http;

      const requestOptions = {
        hostname: url.hostname,
        port: url.port || (isHttps ? 443 : 80),
        path: url.pathname + url.search,
        method: options.method || "GET",
        headers: {
          "Content-Type": "application/json",
          Cookie: this.cookies,
          ...options.headers,
        },
      };

      if (options.body) {
        requestOptions.headers["Content-Length"] = Buffer.byteLength(
          options.body
        );
      }

      const req = client.request(requestOptions, (res) => {
        let data = "";

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies
        if (res.headers["set-cookie"]) {
          this.cookies = res.headers["set-cookie"].join("; ");
        }

        res.on("data", (chunk) => {
          data += chunk;
        });

        res.on("end", () => {
          try {
            const jsonData = JSON.parse(data);
            resolve({
              status: res.statusCode,
              data: jsonData,
              headers: res.headers,
            });
          } catch (error) {
            resolve({
              status: res.statusCode,
              data: data,
              headers: res.headers,
            });
          }
        });
      });

      req.on("error", reject);

      if (options.body) {
        req.write(options.body);
      }

      req.end();
    });
  }

  async get(endpoint) {
    return this.request(endpoint);
  }

  async post(endpoint, data) {
    return this.request(endpoint, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å
class FoodcortTerminalTester {
  constructor() {
    this.client = new HTTPClient(CONFIG.API_BASE_URL);
    this.testResults = [];
    this.sessionData = null;
    this.cartData = null;
    this.products = [];
    this.categories = [];
  }

  log(message, color = CONFIG.COLORS.WHITE) {
    console.log(`${color}${message}${CONFIG.COLORS.RESET}`);
  }

  logTest(testName, status, details = "") {
    const statusColor =
      status === "PASS" ? CONFIG.COLORS.GREEN : CONFIG.COLORS.RED;
    const statusIcon = status === "PASS" ? "‚úÖ" : "‚ùå";

    this.log(`${statusIcon} ${testName}: ${status}`, statusColor);
    if (details) {
      this.log(`   ${details}`, CONFIG.COLORS.CYAN);
    }

    this.testResults.push({ testName, status, details });
  }

  async runTest(testName, testFunction) {
    try {
      this.log(
        `\n${CONFIG.COLORS.BOLD}üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testName}${CONFIG.COLORS.RESET}`
      );
      await testFunction();
    } catch (error) {
      this.logTest(testName, "FAIL", error.message);
    }
  }

  // –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
  async testAuthentication() {
    const response = await this.client.post(
      "/auth/login",
      CONFIG.TEST_CREDENTIALS
    );

    if (response.status === 200 && response.data.auth === true) {
      this.sessionData = response.data;
      this.logTest(
        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ",
        "PASS",
        "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
      );
    } else {
      throw new Error(
        `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${response.status} - ${JSON.stringify(
          response.data
        )}`
      );
    }
  }

  // –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
  async testGetProducts() {
    const response = await this.client.get("/product-main");

    if (response.status === 200 && Array.isArray(response.data)) {
      this.products = response.data;
      this.logTest(
        "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤",
        "PASS",
        `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.products.length} —Ç–æ–≤–∞—Ä–æ–≤`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–∞
      if (this.products.length > 0) {
        const product = this.products[0];
        const requiredFields = ["id", "name", "image", "type", "ingredients"];
        const missingFields = requiredFields.filter((field) => !product[field]);

        if (missingFields.length === 0) {
          this.logTest(
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–∞",
            "PASS",
            "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
          );
        } else {
          this.logTest(
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–∞",
            "FAIL",
            `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: ${missingFields.join(", ")}`
          );
        }
      }
    } else {
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: ${response.status} - ${JSON.stringify(
          response.data
        )}`
      );
    }
  }

  // –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  async testGetCategories() {
    const response = await this.client.get("/groups");

    if (
      response.status === 200 &&
      response.data.success === true &&
      Array.isArray(response.data.data)
    ) {
      this.categories = response.data.data;
      this.logTest(
        "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        "PASS",
        `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`
      );
    } else {
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${response.status} - ${JSON.stringify(
          response.data
        )}`
      );
    }
  }

  // –¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–æ–≤
  async testGetBanners() {
    const response = await this.client.get("/banner-main");

    if (
      response.status === 200 &&
      response.data.success === true &&
      Array.isArray(response.data.data)
    ) {
      this.logTest(
        "–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–æ–≤",
        "PASS",
        `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.data.length} –±–∞–Ω–Ω–µ—Ä–æ–≤`
      );
    } else {
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–æ–≤: ${response.status} - ${JSON.stringify(
          response.data
        )}`
      );
    }
  }

  // –¢–ï–°–¢ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã (—Å–∏–º—É–ª—è—Ü–∏—è)
  async testCartLogic() {
    if (this.products.length === 0) {
      throw new Error("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã");
    }

    const product = this.products[0];
    const productType = product.type && product.type[0];

    if (!productType) {
      throw new Error("–£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç —Ç–∏–ø–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
    }

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    const cartItem = {
      product: product,
      selectedType: productType,
      quantity: 1,
      extras: {},
      removedIngredients: new Set(),
      totalPrice: productType.price,
    };

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    const cartOperations = [
      { name: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", operation: () => ({ items: [cartItem] }) },
      {
        name: "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞",
        operation: () => ({
          items: [
            { ...cartItem, quantity: 2, totalPrice: productType.price * 2 },
          ],
        }),
      },
      {
        name: "–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞",
        operation: () => ({
          items: [{ ...cartItem, quantity: 1, totalPrice: productType.price }],
        }),
      },
      { name: "–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã", operation: () => ({ items: [] }) },
    ];

    cartOperations.forEach((op) => {
      try {
        const result = op.operation();
        this.logTest(
          op.name,
          "PASS",
          `–¶–µ–Ω–∞: ${result.items.reduce(
            (sum, item) => sum + item.totalPrice,
            0
          )} ‚ÇΩ`
        );
      } catch (error) {
        this.logTest(op.name, "FAIL", error.message);
      }
    });
  }

  // –¢–ï–°–¢ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
  async testProductConfiguration() {
    if (this.products.length === 0) {
      throw new Error("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    }

    const product = this.products.find((p) => p.extras && p.extras.length > 0);

    if (!product) {
      this.logTest("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞", "SKIP", "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏");
      return;
    }

    const productType = product.type && product.type[0];
    const extra = product.extras[0];

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞
    const configurations = [
      {
        name: "–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞",
        config: {
          selectedType: productType,
          extras: {},
          removedIngredients: new Set(),
        },
      },
      {
        name: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
        config: {
          selectedType: productType,
          extras: { [extra.id]: 1 },
          removedIngredients: new Set(),
        },
      },
      {
        name: "–£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞",
        config: {
          selectedType: productType,
          extras: {},
          removedIngredients: new Set([0]),
        },
      },
    ];

    configurations.forEach((config) => {
      try {
        const unitPrice = config.config.selectedType.price || 0;
        const extrasTotal = Object.entries(config.config.extras).reduce(
          (sum, [id, count]) => {
            const extra = product.extras.find((e) => e.id.toString() === id);
            return sum + count * (extra?.price || 0);
          },
          0
        );
        const totalPrice = unitPrice + extrasTotal;

        this.logTest(config.name, "PASS", `–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: ${totalPrice} ‚ÇΩ`);
      } catch (error) {
        this.logTest(config.name, "FAIL", error.message);
      }
    });
  }

  // –¢–ï–°–¢ 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
  async testLoyaltySystem() {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const testPhone = "+7 (999) 123-45-67";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^\+7 \(\d{3}\) \d{3}-\d{2}-\d{2}$/;

    if (phoneRegex.test(testPhone)) {
      this.logTest("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "PASS", `–ù–æ–º–µ—Ä: ${testPhone}`);
    } else {
      this.logTest(
        "–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        "FAIL",
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞"
      );
    }

    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    const sessionData = {
      telephone: testPhone,
      receivingMethod: null,
    };

    this.logTest(
      "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
      "PASS",
      "–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
    );
  }

  // –¢–ï–°–¢ 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  async testOrderProcess() {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    const orderSteps = [
      { name: "–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è", status: "delivery" },
      { name: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", status: "confirmed" },
      { name: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞", status: "generated" },
    ];

    orderSteps.forEach((step) => {
      this.logTest(step.name, "PASS", `–°—Ç–∞—Ç—É—Å: ${step.status}`);
    });

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    const orderNumber = Math.floor(Math.random() * 90000) + 10000;
    this.logTest(
      "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞",
      "PASS",
      `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderNumber}`
    );
  }

  // –¢–ï–°–¢ 9: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
  async testTimerAndAutoTransition() {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Ç–∞–π–º–µ—Ä–∞
    const timerDuration = 60; // —Å–µ–∫—É–Ω–¥
    let timeLeft = timerDuration;

    this.logTest(
      "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞",
      "PASS",
      `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${timerDuration} —Å–µ–∫`
    );

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
    for (let i = 0; i < 3; i++) {
      timeLeft--;
      this.logTest(
        `–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç (${timeLeft} —Å–µ–∫)`,
        "PASS",
        `–í—Ä–µ–º—è: ${timeLeft} —Å–µ–∫`
      );
    }

    this.logTest(
      "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥",
      "PASS",
      "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"
    );
  }

  // –¢–ï–°–¢ 10: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç
  async testUtilities() {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é pluralize
    const pluralizeTests = [
      { count: 1, expected: "—Ç–æ–≤–∞—Ä" },
      { count: 2, expected: "—Ç–æ–≤–∞—Ä–∞" },
      { count: 5, expected: "—Ç–æ–≤–∞—Ä–æ–≤" },
    ];

    pluralizeTests.forEach((test) => {
      let result;
      if (test.count === 1) result = "—Ç–æ–≤–∞—Ä";
      else if (test.count >= 2 && test.count <= 4) result = "—Ç–æ–≤–∞—Ä–∞";
      else result = "—Ç–æ–≤–∞—Ä–æ–≤";

      if (result === test.expected) {
        this.logTest(
          `Pluralize (${test.count})`,
          "PASS",
          `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`
        );
      } else {
        this.logTest(
          `Pluralize (${test.count})`,
          "FAIL",
          `–û–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected}, –ø–æ–ª—É—á–µ–Ω–æ: ${result}`
        );
      }
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    const fileTypeTests = [
      { filename: "image.jpg", expected: "image" },
      { filename: "video.mp4", expected: "video" },
      { filename: "document.pdf", expected: "document" },
    ];

    fileTypeTests.forEach((test) => {
      let result;
      if (
        test.filename.includes(".jpg") ||
        test.filename.includes(".png") ||
        test.filename.includes(".webp")
      ) {
        result = "image";
      } else if (
        test.filename.includes(".mp4") ||
        test.filename.includes(".webm")
      ) {
        result = "video";
      } else {
        result = "document";
      }

      if (result === test.expected) {
        this.logTest(`File type (${test.filename})`, "PASS", `–¢–∏–ø: ${result}`);
      } else {
        this.logTest(
          `File type (${test.filename})`,
          "FAIL",
          `–û–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected}, –ø–æ–ª—É—á–µ–Ω–æ: ${result}`
        );
      }
    });
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    this.log(
      `${CONFIG.COLORS.BOLD}${CONFIG.COLORS.CYAN}üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø FOODCORT TERMINAL${CONFIG.COLORS.RESET}`
    );
    this.log(
      `${CONFIG.COLORS.YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${CONFIG.COLORS.RESET}`
    );

    const startTime = Date.now();

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã API
    await this.runTest("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ", () =>
      this.testAuthentication()
    );
    await this.runTest("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤", () =>
      this.testGetProducts()
    );
    await this.runTest("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", () => this.testGetCategories());
    await this.runTest("–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–æ–≤", () => this.testGetBanners());

    // –¢–µ—Å—Ç—ã –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
    await this.runTest("–õ–æ–≥–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã", () => this.testCartLogic());
    await this.runTest("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞", () =>
      this.testProductConfiguration()
    );
    await this.runTest("–°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", () => this.testLoyaltySystem());
    await this.runTest("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", () => this.testOrderProcess());
    await this.runTest("–¢–∞–π–º–µ—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã", () =>
      this.testTimerAndAutoTransition()
    );
    await this.runTest("–£—Ç–∏–ª–∏—Ç—ã", () => this.testUtilities());

    const endTime = Date.now();
    const duration = endTime - startTime;

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.log(
      `\n${CONFIG.COLORS.BOLD}${CONFIG.COLORS.YELLOW}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø${CONFIG.COLORS.RESET}`
    );
    this.log(
      `${CONFIG.COLORS.YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${CONFIG.COLORS.RESET}`
    );

    const passedTests = this.testResults.filter(
      (r) => r.status === "PASS"
    ).length;
    const failedTests = this.testResults.filter(
      (r) => r.status === "FAIL"
    ).length;
    const skippedTests = this.testResults.filter(
      (r) => r.status === "SKIP"
    ).length;
    const totalTests = this.testResults.length;

    this.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    this.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`, CONFIG.COLORS.GREEN);
    this.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`, CONFIG.COLORS.RED);
    this.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedTests}`, CONFIG.COLORS.YELLOW);
    this.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);

    // –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    const successRate = ((passedTests / totalTests) * 100).toFixed(1);
    this.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);

    if (failedTests === 0) {
      this.log(
        `\n${CONFIG.COLORS.BOLD}${CONFIG.COLORS.GREEN}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!${CONFIG.COLORS.RESET}`
      );
      this.log(
        `${CONFIG.COLORS.GREEN}–°–∏—Å—Ç–µ–º–∞ FOODCORT TERMINAL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!${CONFIG.COLORS.RESET}`
      );
    } else {
      this.log(
        `\n${CONFIG.COLORS.BOLD}${CONFIG.COLORS.RED}‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´${CONFIG.COLORS.RESET}`
      );
      this.log(
        `${CONFIG.COLORS.RED}–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${failedTests} —Ç–µ—Å—Ç–æ–≤${CONFIG.COLORS.RESET}`
      );
    }

    this.log(
      `\n${CONFIG.COLORS.CYAN}üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: npm run dev${CONFIG.COLORS.RESET}`
    );
    this.log(
      `${CONFIG.COLORS.CYAN}üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000${CONFIG.COLORS.RESET}`
    );
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new FoodcortTerminalTester();

  try {
    await tester.runAllTests();
  } catch (error) {
    console.error(
      `${CONFIG.COLORS.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}${CONFIG.COLORS.RESET}`
    );
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { FoodcortTerminalTester, CONFIG };
